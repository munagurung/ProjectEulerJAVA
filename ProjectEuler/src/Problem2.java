import java.util.ArrayList;

/**
 * @author Muna Gurung
 * <p>Each new term in the Fibonacci sequence is generated by adding 
 * the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not 
 * exceed four million, find the sum of the even-valued terms.</p>
 *
 */
public class Problem2 {

	/**
	 * Default empty constructor
	 */
	public Problem2(){};
	
	/**
	 * Variable that holds the values of fibonacci sequence in an array list
	 */
	private ArrayList<Integer> fibonacciSequence = new ArrayList<>();
	
	/**
	 * Variable that holds the value of even numbered fibonacci sequence in an array list
	 */
	private ArrayList<Integer> evenSequence = new ArrayList<>();
	
	/**
	 * Main entry of the program for demo/ debugging purposes
	 * @param args
	 */
	public static void main(String[] args) {
		Problem2 obj = new Problem2();
		ArrayList<Integer> a = obj.fibonacciSequence(10);		
		//ArrayList<Integer> actual = obj.evenSequence();
		System.out.println(obj.evenSequence() +  " " + obj.getEvenSequence() + "" + obj.sum());
	}
	
	/**
	 * Method that finds the fibonacci sequence by limit number. E.g. The first 10 fibonacci number
	 * @param limit
	 * @return fibonacciSequence
	 */
	public ArrayList<Integer> fibonacciSequence(int limit)
	{
		fibonacciSequence.add(1);
		fibonacciSequence.add(2);
		int sum = 0;
		for (int i = 2; i < limit; i++)
		{
			int num1 = i-2, num2 =i-1;
			sum = fibonacciSequence.get(num1) + fibonacciSequence.get(num2);
			fibonacciSequence.add(sum);
		}
		return fibonacciSequence;
	}
	
	/**
	 * Method that finds the fibonacci sequence by the limit of it's values. E.g. Fibonacci sequence lower that limit
	 * @param limit
	 * @return
	 */
	public ArrayList<Integer> fibonacciSequenceByValue(int limit)
	{
		fibonacciSequence.add(1);
		fibonacciSequence.add(2);
		int sum = 0;
		int i = 2;
		boolean chk = true;
		while(chk){
			int num1 = i-2, num2 =i-1;
			sum = fibonacciSequence.get(num1) + fibonacciSequence.get(num2);
			if (sum > 4000000)
				chk = false;
			else
			{
				fibonacciSequence.add(sum);
				i++;
			}	
		}
		return fibonacciSequence;
	}
	
	/**
	 * Method that finds the even sequence of the fibonacci sequence
	 * @return evenSequence
	 */
	public ArrayList<Integer> evenSequence()
	{
		int size = fibonacciSequence.size();
		for( int i = 0; i < size; i++)
		{
			if (fibonacciSequence.get(i)%2 == 0)
				getEvenSequence().add(fibonacciSequence.get(i));
		}
		return getEvenSequence();
	}
	
	/**
	 * Method that finds the sum of the even sequenced fibonacci number
	 * @return sum
	 */
	public int sum()
	{
		//array
		int sum = 0;
		int size = getEvenSequence().size();
		for( int i = 0; i < size; i++)
		{
			sum += getEvenSequence().get(i);
		}
		return sum;
	}

	/**
	 * Method that returns the even sequence array list
	 * @return even sequence
	 */
	public ArrayList<Integer> getEvenSequence() {
		return evenSequence;
	}

	/**
	 * Method that sets the even sequence array list
	 * <p>This method is not used in this problem</p>
	 * @param evenSequence
	 */
	public void setEvenSequence(ArrayList<Integer> evenSequence) {
		this.evenSequence = evenSequence;
	}
}
